#include "windows.h"
#include "iostream"
using namespace std;

//############################################################################
//####  Часть подсчета времени  ##############################################
//############################################################################

// глобальная переменная в которой будет количество миллисекунд 
// с запуска программы
int mlFromStart = 0;

// переменная которая показывает идет ли отсчет времени
bool isCalcTime = true;


// функция которая считает время в бесконечном цикле
void startCalcTime()
{
	// бесконечный цикл, пока считаем время
	while (isCalcTime)
	{
		// добавляем 1мс
		mlFromStart++;

		// функция, которая приостанавливает выполнение
		// на 1 мс
		Sleep(1);
	}
}

// функция останавливающая счет времени
void stopCalcTime()
{
	// ставим наш флаг в 0, то есть теперь бесконечный цикл в 
	// startCalcTime закончит свое выполнение 
	isCalcTime = false;
}

// это функция вызывается при создании потока ниже, в ней
// мы вызываем нашу функцию подсчета времени
DWORD WINAPI ThreadFunction(void* lpParameter)
{
	// вызываем функцию подсчета времени
	startCalcTime();
	return 0;
}

//############################################################################
//####  Часть сортировки  ####################################################
//############################################################################


// неважно какая функция сортировки
// пусть пузырьком, чтобы подольше :) <- мое лицо, когда изучаю многопоточность
void sort(int* mas) 
{ 
	for (size_t i = 0; i < 1000; i++)
	{
		Sleep(1);
	}
};

int main()
{
	// создаем поток, пока что без объяснений функции, это ниже, как видно
	// 3 параметром идет имя нашей функции ThreadFunction, которую мы
	// задали выше, именно здесь прописывается эта функция
	HANDLE thread = CreateThread(NULL, 0, ThreadFunction, NULL, 0, NULL);

	// начинаем работать с сортировкой
	// огромный массив, который сортируется очень долго
	int mas[5] = { 2, 5, 6, 1, 9 };

	// сортируем
	sort(mas);

	// после того как сортировки прошла, мы заканчивать считать время
	stopCalcTime();

	// обязательно очищаем память
	CloseHandle(thread);


	cout << "Sort time = " << mlFromStart << endl;
	return 0;
}